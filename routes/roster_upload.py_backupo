
import logging
from flask import session
from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_required
import pandas as pd
from werkzeug.utils import secure_filename
import os

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
logger = logging.getLogger(__name__)

roster_upload_bp = Blueprint('roster_upload', __name__)

UPLOAD_FOLDER = 'uploads/roster'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
ALLOWED_EXTENSIONS = {'xlsx'}

@roster_upload_bp.route('/roster-upload', methods=['GET', 'POST'])
@login_required
def roster_upload():
    table_data = None
    if request.method == 'POST':
        try:
            from flask_login import current_user
            logger.info(f"[UPLOAD] user={getattr(current_user, 'username', None)}, role={getattr(current_user, 'role', None)}")
            feedback_msgs = []
            if current_user.role not in ['super_admin', 'account_admin', 'team_admin']:
                feedback_msgs.append('You do not have permission to upload shift roster.')
                logger.warning('Permission denied for upload.')
                for msg in feedback_msgs:
                    flash(msg)
                return redirect(url_for('roster_upload.roster_upload'))

            # Handle file upload
            file = request.files.get('file')
            if not file or file.filename == '':
                flash('No file selected.')
                return redirect(url_for('roster_upload.roster_upload'))
            if not ('.' in file.filename and file.filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS):
                flash('Invalid file type. Only XLSX files are allowed.')
                return redirect(url_for('roster_upload.roster_upload'))
            filename = secure_filename(file.filename)
            filepath = os.path.join(UPLOAD_FOLDER, filename)
            file.save(filepath)

            # Parse XLSX
            try:
                df = pd.read_excel(filepath)
            except Exception as e:
                flash(f'Error reading Excel file: {e}')
                return redirect(url_for('roster_upload.roster_upload'))

            # Support wide format: first column is 'Member Name', rest are dates
            # Normalize all column headers to string and strip whitespace
            df.columns = [str(col).strip() for col in df.columns]
            member_name_col = next((c for c in df.columns if c.lower() == 'member name'.lower()), None)
            if member_name_col:
                long_df = df.melt(id_vars=[member_name_col], var_name='Date', value_name='Shift')
                long_df = long_df.rename(columns={member_name_col: 'Team Member'})
                # Drop rows with missing Team Member, Date, or Shift
                long_df = long_df.dropna(subset=['Team Member', 'Date', 'Shift'])
                long_df['Date'] = pd.to_datetime(long_df['Date'])
                df = long_df[['Date', 'Shift', 'Team Member']]

            # Validate columns
            required_cols = {'Date', 'Shift', 'Team Member'}
            df.columns = [str(col).strip() for col in df.columns]
            if not required_cols.issubset(set(df.columns)):
                flash(f'Missing required columns. Found: {[str(c) for c in df.columns]}')
                # Debug: show all column types
                flash(f'Column types: {[type(c) for c in df.columns]}')
                return redirect(url_for('roster_upload.roster_upload'))

            # Get account/team from user
            from models.models import Account, Team
            account_id = None
            team_id = None
            accounts = []
            teams = []
            if current_user.role == 'super_admin':
                accounts = Account.query.filter_by(is_active=True).all()
                account_id = request.args.get('account_id') or (session.get('selected_account_id') if hasattr(session, 'get') else None)
                teams = Team.query.filter_by(is_active=True)
                if account_id:
                    teams = teams.filter_by(account_id=account_id)
                teams = teams.all()
                team_id = request.args.get('team_id') or (session.get('selected_team_id') if hasattr(session, 'get') else None)
            elif current_user.role == 'account_admin':
                account_id = getattr(current_user, 'account_id', None)
                accounts = [Account.query.get(account_id)] if account_id else []
                teams = Team.query.filter_by(account_id=account_id, is_active=True).all()
                team_id = request.args.get('team_id') or (session.get('selected_team_id') if hasattr(session, 'get') else None)
            else:
                account_id = getattr(current_user, 'account_id', None)
                team_id = getattr(current_user, 'team_id', None)
                accounts = [Account.query.get(account_id)] if account_id else []
                teams = [Team.query.get(team_id)] if team_id else []
            # Import models and db inside function to avoid circular import
            from models.models import ShiftRoster, TeamMember, db

            # Determine month/year from first row
            df['Date'] = pd.to_datetime(df['Date'])
            month = df['Date'].dt.month.iloc[0]
            year = df['Date'].dt.year.iloc[0]

            # Override: delete existing roster for this month/year/account/team
            db.session.query(ShiftRoster).filter(
                ShiftRoster.account_id == account_id,
                ShiftRoster.team_id == team_id,
                ShiftRoster.date >= pd.Timestamp(year=year, month=month, day=1),
                ShiftRoster.date < pd.Timestamp(year=year, month=month, day=1) + pd.offsets.MonthEnd(1)
            ).delete()
            db.session.commit()

            # Insert new roster entries, skipping duplicate members per date/shift
            inserted = 0
            skipped = 0
            for _, row in df.iterrows():
                member_name = row['Team Member']
                date = row['Date']
                shift_code = row['Shift']
                # Robust skip for missing/NaN values
                if pd.isna(member_name) or pd.isna(date) or pd.isna(shift_code):
                    skipped += 1
                    continue
                date = pd.to_datetime(date).date()
                member_name = str(member_name).strip()
                shift_code = str(shift_code).strip()
                if not member_name or not shift_code:
                    skipped += 1
                    continue
                # Find team member
                # Normalize member name for matching
                norm_name = member_name.strip().lower()
                member = TeamMember.query.filter(
                    db.func.lower(db.func.trim(TeamMember.name)) == norm_name,
                    TeamMember.account_id == account_id,
                    TeamMember.team_id == team_id
                ).first()
                if not member:
                    # Fallback: try partial/case-insensitive match
                    member = TeamMember.query.filter(
                        TeamMember.name.ilike(f"%{member_name.strip()}%"),
                        TeamMember.account_id == account_id,
                        TeamMember.team_id == team_id
                    ).first()
                if not member:
                    # Create new TeamMember if not found
                    member = TeamMember(
                        name=member_name.strip(),
                        email=f"{member_name.strip().replace(' ', '_').lower()}@example.com",
                        contact_number="N/A",
                        role="AutoImported",
                        account_id=account_id,
                        team_id=team_id
                    )
                    db.session.add(member)
                    db.session.flush()  # Get member.id
                # Check for duplicate
                exists = ShiftRoster.query.filter_by(date=date, shift_code=shift_code, team_member_id=member.id, account_id=account_id, team_id=team_id).first()
                if exists:
                    skipped += 1
                    continue
                entry = ShiftRoster(
                    date=date,
                    shift_code=shift_code,
                    team_member_id=member.id,
                    account_id=account_id,
                    team_id=team_id
                )
                db.session.add(entry)
                inserted += 1
            db.session.commit()
            flash(f'Roster uploaded: {inserted} entries added, {skipped} skipped.')
            # Optionally show table preview
            table_data = df.head(20).to_dict(orient='records')
            columns = df.columns.tolist()
            return render_template('shift_roster_upload.html', table_data=table_data, columns=columns)
        except Exception as e:
            logger.error(f"Unexpected error in upload handler: {e}")
            from models.models import db
            db.session.rollback()
            flash(f"Unexpected error: {e}")
            return redirect(url_for('roster_upload.roster_upload'))
    return render_template('shift_roster_upload.html', table_data=table_data)

